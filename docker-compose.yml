version: '3.8'

services:
  # Feedback Service
  feedback-service:
    build: .
    ports:
      - "8000:8000"
    environment:
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - DEBUG=true
      - MONGODB_URL=mongodb://mongo:27017
      - MONGODB_DATABASE=feedback_service
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_SUBMISSION_TOPIC=test_submissions
      - KAFKA_FEEDBACK_TOPIC=feedback_results
      - KAFKA_CONSUMER_GROUP=feedback_service_group
      - LLM_API_URL=http://llm-gateway:8080/v1
      - LLM_API_KEY=your-api-key-here
      - LLM_TIMEOUT=30
      - LOG_LEVEL=INFO
    depends_on:
      - mongo
      - kafka
      - llm-gateway
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
    networks:
      - feedback-network
    restart: unless-stopped

  # MongoDB
  mongo:
    image: mongo:7.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=feedback_service
    volumes:
      - mongo_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - feedback-network
    restart: unless-stopped

  # MongoDB Express (Admin UI)
  mongo-express:
    image: mongo-express:1.0.0
    ports:
      - "8081:8081"
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_URL=mongodb://admin:password@mongo:27017/
      - ME_CONFIG_BASICAUTH_USERNAME=admin
      - ME_CONFIG_BASICAUTH_PASSWORD=admin
    depends_on:
      - mongo
    networks:
      - feedback-network
    restart: unless-stopped

  # Zookeeper (required for Kafka)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - feedback-network
    restart: unless-stopped

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - feedback-network
    restart: unless-stopped

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    depends_on:
      - kafka
    networks:
      - feedback-network
    restart: unless-stopped

  # Mock LLM Gateway (for development/testing)
  llm-gateway:
    image: wiremock/wiremock:3.0.1
    ports:
      - "8082:8080"
    volumes:
      - ./scripts/wiremock:/home/wiremock
    command: --global-response-templating --verbose
    networks:
      - feedback-network
    restart: unless-stopped

  # Redis (for caching - optional)
  redis:
    image: redis:7.2-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - feedback-network
    restart: unless-stopped

  # Prometheus (for monitoring - optional)
  prometheus:
    image: prom/prometheus:v2.47.0
    ports:
      - "9090:9090"
    volumes:
      - ./scripts/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - feedback-network
    restart: unless-stopped

  # Grafana (for monitoring dashboard - optional)
  grafana:
    image: grafana/grafana:10.1.0
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./scripts/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./scripts/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - feedback-network
    restart: unless-stopped

volumes:
  mongo_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  feedback-network:
    driver: bridge